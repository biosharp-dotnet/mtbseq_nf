input_fastqs_folder = false // "fastqs/*_{1,2}*fastq.gz"

input_samplesheet = "${projectDir}/samplesheet.csv"

only_qc = false

parallel = false

library_name = "illumina"

outdir = "MTBseq-nf-results"

user = "root"

project = "mtbseqnf"

// This can be customized for scenarios where the software binaries are dumped in a specific path and it isn't possible to use conda.
mtbseq_path = "MTBseq"

cohort_tsv = "${params.project}_cohort.tsv"

//-------------------------------------
// Default publication settings for all processes
// These can be overridden at process level
//-------------------------------------

save_mode = 'copy'
should_publish = true


//-------------------------------------
// OPTIONS FROM MTBSEQ MANUAL
//-------------------------------------

//NOTE: Setting this OPTION will skip all filtering steps and report the calculated information for all positions in the input file.
// The all_vars only needs to be activated in MTBseq. But in mtbseq-nf we'll specify it as false
all_vars = false

// Setting this OPTION will add an additional filter that excludes all variants except SNPs.
snp_vars = false

// Setting this OPTION has major implications on how the mapping data for each position is processed. By default, the majority allele is called and taken for further calculations.
// If the --lowfreq_vars OPTION is set, MTBseq will consider the majority allele distinct from wild type, if such an allele is present.
// This means that only in this detection mode, MTBseq will report variants present only in subpopulations, i.e. low frequency mutations.
// Of course, OPTIONS --mincovf, --mincovr, --minphred and --minfreq need to be set accordingly.
// Please be aware that output generated in this detection mode should not be used for phylogenetic analysis.
lowfreq_vars = false

// The OPTION sets a threshold for the sequence data quality to be used for the mpileup creation
minbqual = 13

// The OPTION sets a minimum forward read coverage threshold. Alleles must have a forward coverage of this VALUE or higher to be considered.
mincovf = 4

// The OPTION sets a minimum reverse read coverage threshold. Alleles must have a reverse coverage of this VALUE or higher to be considered.
mincovr = 4

// The OPTION sets a minimum number of reads indicating an allele with a phred score of at least 20.
minphred = 4

// The OPTION sets a minimum frequency for an allele.
minfreq = 75

// The option sets a minimum percentage of samples with unambiguous information for position.
unambig = 95

// The OPTION sets a window size in which the algorithm scans for the occurrence of multiple variants within the same sample.
// If more than one variant occurs within this window in the same sample, the positions will be excluded.
window = 12

// The OPTION sets a SNP distance that is used to classify samples into groups of samples, using agglomerative clustering.
// If SNP distances between samples are less or equal this VALUE, they are grouped together.
distance = 12

// The OPTION sets the maximum number of CPUs to use within the pipeline.
// You can use more than one core in order to execute the pipeline faster. 8 is the current maximum.
threads = 8

ref_and_indexes_path = "${projectDir}/data/references/ref/"



//--------------
//
//TODO: Described in https://github.com/mtb-bioinformatics/mtbseq-nf/issues/53
// --ref This OPTION sets the reference genome for the read mapping.
// By default, the genome of Mycobacterium tuberculosis H37Rv (NC_000962.3) is set as reference.
// User supplied FASTA files for other reference genomes should be placed in the directory /MTBseq_source/var/ref/, and the respective name given without .fasta extension.

// This OPTION sets the reference genome for the read mapping.
// ref = "${params.ref_and_indexes_path}/M._tuberculosis_H37Rv_2015-11-13.fasta"

//--------------

// This OPTION sets a list of known variant positions associated to drug resistance for resistance prediction.
resilist = "${projectDir}/data/references/res/MTB_Resistance_Mediating.txt"

// This OPTION sets a list of interesting regions to be used for annotation of detected variants
intregions = "${projectDir}/data/references/res/MTB_Extended_Resistance_Mediating.txt"

// This OPTION specifies a gene categories file to annotate essential and non-essential genes as well as repetitive regions. SNPs in repetitive regions will be excluded for phylogenetic analysis.
categories = "${projectDir}/data/references/cat/MTB_Gene_Categories.txt"

// This OPTION specifies a file for base quality recalibration. The list must be in VCF format and should contain known SNPs.
basecalib = "${projectDir}/data/references/res/MTB_Base_Calibration_List.vcf"

//TODO: Refactor this section to rely upon the withName selectors
// Module level parameters
TBBWA {
    results_dir = "${params.outdir}/tbbwa"

    // cpus = params.threads

    // // ref = params.ref
    // resilist = params.resilist
    // intregions = params.intregions
    // categories = params.categories
    // basecalib = params.basecalib

}

TBREFINE {
    results_dir = "${params.outdir}/tbrefine"

    // cpus = params.threads

    // // ref = params.ref
    // resilist = params.resilist
    // intregions = params.intregions
    // categories = params.categories
    // basecalib = params.basecalib


}

TBPILE {
    results_dir = "${params.outdir}/tbpile"

    // cpus = params.threads

    // // ref = params.ref
    // resilist = params.resilist
    // intregions = params.intregions
    // categories = params.categories
    // basecalib = params.basecalib



}

TBLIST {
    results_dir = "${params.outdir}/tblist"

    // cpus = params.threads

    // minbqual = params.minbqual

    // // ref = params.ref
    // resilist = params.resilist
    // intregions = params.intregions
    // categories = params.categories
    // basecalib = params.basecalib


}

TBVARIANTS {
    results_dir = "${params.outdir}/tbvariants"

    // all_vars = params.all_vars
    // snp_vars = params.snp_vars
    // lowfreq_vars = params.lowfreq_vars
    // mincovf = params.mincovf
    // mincovr = params.mincovr
    // minphred = params.minphred
    // minfreq = params.minfreq

    // // ref = params.ref
    // resilist = params.resilist
    // intregions = params.intregions
    // categories = params.categories
    // basecalib = params.basecalib


}

TBSTATS {
    results_dir = "${params.outdir}/tbstats"

    // project = params.project
    // all_vars = params.all_vars
    // snp_vars = params.snp_vars
    // lowfreq_vars = params.lowfreq_vars
    // mincovf = params.mincovf
    // mincovr = params.mincovr
    // minphred = params.minphred
    // minfreq = params.minfreq

    // // ref = params.ref
    // resilist = params.resilist
    // intregions = params.intregions
    // categories = params.categories
    // basecalib = params.basecalib


}

TBJOIN {
    results_dir = "${params.outdir}/tbjoin"

    // project = params.project
    // all_vars = params.all_vars
    // snp_vars = params.snp_vars
    // lowfreq_vars = params.lowfreq_vars
    // mincovf = params.mincovf
    // mincovr = params.mincovr
    // minphred = params.minphred
    // minfreq = params.minfreq

    // // ref = params.ref
    // resilist = params.resilist
    // intregions = params.intregions
    // categories = params.categories
    // basecalib = params.basecalib



}

TBSTRAINS {
    results_dir = "${params.outdir}/tbstrains"

    // project = params.project
    // all_vars = params.all_vars
    // snp_vars = params.snp_vars
    // lowfreq_vars = params.lowfreq_vars
    // mincovf = params.mincovf
    // mincovr = params.mincovr
    // minphred = params.minphred
    // minfreq = params.minfreq

    // // ref = params.ref
    // resilist = params.resilist
    // intregions = params.intregions
    // categories = params.categories
    // basecalib = params.basecalib


}



TBAMEND {
    results_dir = "${params.outdir}/tbamend"

// window = params.window
    // unambig = params.unambig
// minfreq = params.minfreq
// minphred = params.minphred
// mincovr = params.mincovr

// // ref = params.ref
    // resilist = params.resilist
// intregions = params.intregions
// categories = params.categories
// basecalib = params.basecalib


}

TBGROUPS {
    results_dir = "${params.outdir}/tbgroups"

// project = params.project
    // distance = params.distance

// // ref = params.ref
    // resilist = params.resilist
// intregions = params.intregions
// categories = params.categories
// basecalib = params.basecalib


}

TBFULL {
    results_dir = "${params.outdir}/tbfull"

// minbqual = params.minbqual
    // mincovf = params.mincovf
// mincovr = params.mincovr
// minphred = params.minphred
// minfreq = params.minfreq
// unambig = params.unambig
// window = params.window
// distance = params.distance


    // // ref = params.ref
    // resilist = params.resilist
// intregions = params.intregions
// categories = params.categories
// basecalib = params.basecalib


}

RENAME_FILES {
    results_dir = "${params.outdir}/rename_files"
}

FASTQC {
    results_dir = "${params.outdir}/fastqc"
}

MULTIQC {
    results_dir = "${params.outdir}/multiqc"
}
